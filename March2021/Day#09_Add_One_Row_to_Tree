/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* addOneRow(TreeNode* root, int v, int d) {
        queue<TreeNode*> queue;
        TreeNode* curr;
        TreeNode node;
        int depth = 1, n;
        
        queue.push(root);
        
        //If d=1, add a new node which would be root and 
        //original root would be new root's left child
        if(d == 1)
        {
            root = new TreeNode(v, root, NULL);
            return root;
        }
        
        while(queue.size() != 0)
        {
            n = queue.size();
            
            
            if(depth == d-1)
            {
                for(int i=0; i<n; i++)
                {
                    curr = queue.front();
                    queue.pop();
                    if(curr == NULL){
                        continue;
                    }
                    curr->left = new TreeNode(v, curr->left, NULL);;
                    curr->right = new TreeNode(v, NULL, curr->right);
                    
                }
                break;
            }
            
            for(int i=0; i<n; i++)
            {
                curr = queue.front();
                queue.pop();

                if(curr == NULL)
                    continue;
                if(curr->left != NULL)
                    queue.push(curr->left);
                if(curr->right != NULL)
                    queue.push(curr->right);
            }
            
            depth++;
            
        }
        return root;
    }
};
