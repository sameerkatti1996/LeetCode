class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        vector<int> pair;
        
        sort(nums.begin(), nums.end());
        
        int missing = -1;
        int duplicate;
        
        map<int, int> mapping;
        
        for(int i=0;i<nums.size(); i++)
        {
            if(mapping.find(nums[i]) != mapping.end())
            {
                duplicate = nums[i];
            }
            else
            {
                mapping[nums[i]] = 1;
            }
        }
        
        std::vector<int> key;
        for(std::map<int,int>::iterator it = mapping.begin(); it != mapping.end(); ++it) {
          key.push_back(it->first);
        }
        
        if(key[0] != 1)
            missing = 1;
        else if(key[key.size()-1] != nums.size())
            missing = nums.size();
        else
        {
            for(int i=0; i<key.size(); i++)
            {
                if(key[i] != i+1){
                    missing = i+1;
                    break;
                }
            }
        }
        
        pair.push_back(duplicate);
        pair.push_back(missing);
        
        return pair;
    }
};
