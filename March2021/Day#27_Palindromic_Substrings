//Initial Solution
class Solution {
public:
    int countSubstrings(string s) {
        int temp_i, temp_j, res = s.size();
        for(int i=0; i<s.size()-1; i++)
        {
            for(int j=s.size()-1; j>i; j--)
            {
                temp_i = i;
                temp_j = j;
                
                while(temp_i < temp_j)
                {
                    if(s[temp_i] == s[temp_j])
                    {
                        temp_i++;
                        temp_j--;
                    }
                    else
                        break;
                }
                
                if(temp_i >= temp_j)
                    res++;
            }
        }
        return res;
    }
};

/*
//DP based solution
class Solution {
public:
    int countSubstrings(string s) {
        int n = s.size();
        int ans = n;
        
        int dp[n][n];
        
	//Cover all substrings of length 1
        for(int i=0; i<n; i++)
            dp[i][i] = 1;
        
	//Cover all substrings of length 2
        for(int i=0; i<n-1; i++){
            dp[i][i+1] = s[i] == s[i+1];
            ans += dp[i][i+1];
        }
        
	//All substrings of length 3
	//A substring i-j is palindromic is s[i]==s[j] and i-1 to j-1 is palindrome
        for (int len = 3; len <= n; ++len)
            for (int i = 0, j = i + len - 1; j < n; ++i, ++j) {
                dp[i][j] = dp[i + 1][j - 1] && (s[i] == s[j]);
                ans += dp[i][j];
            }
        return ans;
    }
};
*/
