/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> flipMatchVoyage(TreeNode* root, vector<int>& voyage) {
        vector<int> result;
        int i = 0;
        if(voyageCheck(root, voyage, i, result)) 
            return result;
        else
            return {-1};
    }
    bool voyageCheck(TreeNode* node, vector<int>& voyage, int& i, vector<int>& res) {
        if (!node) 
            return true;
        
        //If next value is not node's value
        if (node->val != voyage[i]) 
            return false;
        
        i++;
        //If nodes's next is not left, then flip is yes
        if (node->left && node->left->val != voyage[i]) {
            res.push_back(node->val);
            
            //Check for further children
            //Right first because its flipped
            return voyageCheck(node->right, voyage, i, res) && 
                voyageCheck(node->left, voyage, i, res);
        }
        //If not flipped, check left child first
        return voyageCheck(node->left, voyage, i, res) && 
            voyageCheck(node->right, voyage, i, res);
    }
};
