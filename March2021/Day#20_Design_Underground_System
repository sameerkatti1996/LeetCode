class UndergroundSystem {
public:
    UndergroundSystem() {
        
    }
    
    void checkIn(int id, string stationName, int t) {
        this->reg.insert({id, make_pair(stationName, t)});
    }
    
    void checkOut(int id, string stationName, int t) {
        pair details = this->reg[id];
        int startTime = details.second;
        string startStation = details.first;
        
        string stations = startStation+stationName;
        
        if(time_between_stations.find(stations) != time_between_stations.end())
        {
            vector<int> times = time_between_stations[stations];
            times.push_back(t-startTime);
            time_between_stations[stations] = times;
        }
        else
        {
            vector<int> times{t-startTime};
            time_between_stations[stations] = times;            
        }
        
        this->reg.erase(id);
    }
    
    double getAverageTime(string startStation, string endStation) {
        vector<int> times = time_between_stations[startStation + endStation];
        double sum = 0;
        for(int i=0; i<times.size(); i++)
        {
            sum += times[i];
        }
        return sum/times.size();
    }
    
    map<string, vector<int>> time_between_stations;
    map<int, pair<string, int>> reg;
};

/**
 * Your UndergroundSystem object will be instantiated and called as such:
 * UndergroundSystem* obj = new UndergroundSystem();
 * obj->checkIn(id,stationName,t);
 * obj->checkOut(id,stationName,t);
 * double param_3 = obj->getAverageTime(startStation,endStation);
 */
